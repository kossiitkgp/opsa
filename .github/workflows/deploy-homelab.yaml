name: Deploy to Homelab

on:
    push:
        branches:
            - "rewrite"

jobs:
    deploy-homelab:
        runs-on: [self-hosted, proxmox-vm]

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.LURKINGRYUU_PAT }}

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
              with:
                  install: true

            - name: Configure SSH for homelab server
              env:
                  SSH_PRIVATE_KEY: ${{ secrets.HOMELAB_SSH_PRIVATE_KEY }}
                  SSH_PUBLIC_KEY: ${{ secrets.HOMELAB_SSH_PUBLIC_KEY }}
                  SSH_HOST: ${{ secrets.HOMELAB_SSH_HOST }}
                  SSH_USER: ${{ secrets.HOMELAB_SSH_USER }}
              run: |
                  mkdir -p ~/.ssh
                  echo "$SSH_PRIVATE_KEY" > ~/.ssh/homelab_key
                  echo "$SSH_PUBLIC_KEY" > ~/.ssh/homelab_key.pub
                  chmod 600 ~/.ssh/homelab_key
                  chmod 600 ~/.ssh/homelab_key.pub
                  
                  # Add homelab server to known hosts
                  ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts

            - name: Build Docker images
              run: |
                  echo "Building Docker images..."
                  
                  # Build digester service
                  docker build -t opsa-digester:latest ./digester
                  
                  # Build excretor service  
                  docker build -f excretor/Dockerfile -t opsa-excretor:latest .
                  
                  # Build garnisher service
                  docker build -t opsa-garnisher:latest ./garnisher

            - name: Save Docker images
              run: |
                  echo "Saving Docker images to tar files..."
                  docker save opsa-digester:latest | gzip > opsa-digester.tar.gz
                  docker save opsa-excretor:latest | gzip > opsa-excretor.tar.gz  
                  docker save opsa-garnisher:latest | gzip > opsa-garnisher.tar.gz

            - name: Transfer files to homelab server
              env:
                  SSH_HOST: ${{ secrets.HOMELAB_SSH_HOST }}
                  SSH_USER: ${{ secrets.HOMELAB_SSH_USER }}
              run: |
                  echo "Transferring files to homelab server..."
                  
                  # Create deployment directory on remote server
                  ssh -i ~/.ssh/homelab_key -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "mkdir -p ~/opsa-deployment"
                  
                  # Transfer Docker images
                  scp -i ~/.ssh/homelab_key -o StrictHostKeyChecking=no *.tar.gz $SSH_USER@$SSH_HOST:~/opsa-deployment/
                  
                  # Transfer docker-compose and other necessary files
                  scp -i ~/.ssh/homelab_key -o StrictHostKeyChecking=no docker-compose.yml $SSH_USER@$SSH_HOST:~/opsa-deployment/
                  scp -r -i ~/.ssh/homelab_key -o StrictHostKeyChecking=no migrations/ $SSH_USER@$SSH_HOST:~/opsa-deployment/
                  scp -r -i ~/.ssh/homelab_key -o StrictHostKeyChecking=no tummy/ $SSH_USER@$SSH_HOST:~/opsa-deployment/

            - name: Deploy services on homelab server
              env:
                  SSH_HOST: ${{ secrets.HOMELAB_SSH_HOST }}
                  SSH_USER: ${{ secrets.HOMELAB_SSH_USER }}
              run: |
                  echo "Deploying services on homelab server..."
                  
                  ssh -i ~/.ssh/homelab_key -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << 'EOF'
                  cd ~/opsa-deployment
                  
                  # Load Docker images
                  echo "Loading Docker images..."
                  docker load < opsa-digester.tar.gz
                  docker load < opsa-excretor.tar.gz
                  docker load < opsa-garnisher.tar.gz
                  
                  # Stop existing services if running
                  echo "Stopping existing services..."
                  docker-compose down --remove-orphans || true
                  
                  # Start services
                  echo "Starting services..."
                  docker-compose up -d
                  
                  # Clean up image files
                  rm -f *.tar.gz
                  
                  # Show running containers
                  echo "Deployment complete! Running containers:"
                  docker ps
                  EOF

            - name: Health check
              env:
                  SSH_HOST: ${{ secrets.HOMELAB_SSH_HOST }}
                  SSH_USER: ${{ secrets.HOMELAB_SSH_USER }}
                  HEALTH_CHECK_URL: ${{ secrets.HOMELAB_HEALTH_CHECK_URL }}
              run: |
                  echo "Performing health check..."
                  
                  # Wait a bit for services to start
                  sleep 30
                  
                  # Check if containers are running
                  ssh -i ~/.ssh/homelab_key -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << 'EOF'
                  cd ~/opsa-deployment
                  
                  # Check container status
                  if docker-compose ps | grep -q "Up"; then
                    echo "✅ Services are running successfully"
                  else
                    echo "❌ Some services failed to start"
                    docker-compose logs --tail=50
                    exit 1
                  fi
                  EOF
                  
                  # Optional: HTTP health check if you have a health endpoint
                  if [ -n "$HEALTH_CHECK_URL" ]; then
                    echo "Checking health endpoint..."
                    for i in {1..5}; do
                      if curl -f "$HEALTH_CHECK_URL" > /dev/null 2>&1; then
                        echo "✅ Health check passed"
                        break
                      else
                        echo "⏳ Health check attempt $i failed, retrying..."
                        sleep 10
                      fi
                      
                      if [ $i -eq 5 ]; then
                        echo "❌ Health check failed after 5 attempts"
                        exit 1
                      fi
                    done
                  fi

            - name: Cleanup local files
              if: always()
              run: |
                  echo "Cleaning up local files..."
                  rm -f *.tar.gz
                  rm -f ~/.ssh/homelab_key ~/.ssh/homelab_key.pub

            - name: Send deployment notification
              if: always()
              env:
                  WEBHOOK_URL: ${{ secrets.DEPLOYMENT_WEBHOOK_URL }}
              run: |
                  if [ -n "$WEBHOOK_URL" ]; then
                    STATUS="${{ job.status }}"
                    COMMIT_SHA="${{ github.sha }}"
                    COMMIT_MSG="${{ github.event.head_commit.message }}"
                    
                    curl -X POST "$WEBHOOK_URL" \
                      -H "Content-Type: application/json" \
                      -d "{
                        \"status\": \"$STATUS\",
                        \"commit\": \"$COMMIT_SHA\",
                        \"message\": \"$COMMIT_MSG\",
                        \"branch\": \"rewrite\",
                        \"repository\": \"${{ github.repository }}\"
                      }" || echo "Failed to send notification"
                  fi
